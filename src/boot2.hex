b8 e0 # mov 0x7e0 to ax (cont)				# Set up segments
07 8e # ^- and mov ax to es (cont)
c0 05 # ^- and add 0x120 to ax (cont)
20 01 # ^-
8e d0 # mov ax to ss
bc 00 # mov 0x1000 into sp (cont)			# finish setting up stack
10 fc # ^- and clear direction bit
31 db # xor bx into bx
e8 11 # call 0x11 (cont)					# print ui
00 90 # ^- and nop
b4 00 # mov 0x00 into ah					# get character
cd 16 # int 0x16
b4 0e # mov 0x0e into ah
90 90										# parse and command
90 90
90 90
90 f4 # nop and hlt
eb fd # jump -0x3
55 89 # push bp and mov sp into bp (cont)	# procedure: print ui
e5 50 # ^- and push ax
b4 0e # mov 0x0e into ah
b0 0d # mov 0x0d (CR) into al
cd 10 # int 0x10
b0 40 # mov 0x40 ('@') into al
cd 10 # int 0x10
b0 20 # mov 0x20 (' ') into al
cd 10 # int 0x10
b0 30 # mov 0x30 ('0') into al
cd 10 # int 0x10
b0 78 # mov 0x78 ('x') into al
cd 10 # int 0x10
88 f8 # mov bh into al						# convert bx to hex number
c0 e8 # logical shift al right 4 (cont)
04 e8 # ^- and call cntc (cont)
4a 00 # ^-
cd 10 # int 0x10
88 f8 # mov bh into al
24 0f # and 0xf into al
e8 41 # call cntc (cont)
00 cd # ^- and int 0x10 (cont)
10 88 # ^- and mov bl into al (cont)
d8 c0 # ^- and logical shift al right 4 (cont)
e8 04 # ^-
e8 37 # call cntc (cont)
00 cd # ^- and  int 0x10 (cont)
10 88 # ^- and mov bl into al (cont)
d8 24 # ^- and and 0xf into al (cont)
0f e8 # ^- and call cntc (cont)
2e 00 # ^-
cd 10 # int 0x10							# done printing bx
b0 20 # mov 0x20 (' ') into al
cd 10 # int 0x10
b0 5b # mov 0x5b ('[') into al
cd 10 # int 0x10
26 8a # mov [es:bx] into al (cont)			# convert current value to hex number
07 c0 # ^- and logical shift al right 4 (cont)
e8 04 # ^-
e8 1b # call cntc (cont)
00 cd # ^- and int 0x10 (cont)
10 26 # ^- and mov [es:bx] into al (cont)
8a 07 # ^-
24 0f # and 0xf into al
e8 11 # call cntc (cont)
00 cd # ^- and int 0x10 (cont)				# done printing value
10 b0 # ^- and mov 0x5d (']') into al (cont)
5d cd # ^- and int 0x10 (cont)
10 b0 # ^- and mov 0x20 (' ') into al (cont)
20 cd # ^- and int 0x10 (cont)
10 b0 # ^- and mov 0x3e ('>') into al (cont)
3e cd # ^- and int 0x10 (cont)
10 58 # ^- and pop ax
c9 c3 # leave and ret
04 30 # add 0x30 to al						# convert nibble to character (cntc)
3c 3a # cmp al, 0x3a
7c 02 # jl 0x20
04 27 # add 0x27 to al
c3 90 # ret and nop
55 89 # push bp and mov sp into bp (cont)	# procedure: parse
52 90 # push dx and nop
3c 6c # cmp al, 0x6c ('l')
75 03 # jne 0x3
e8 00 # call next cell procedure (cont)
00 3c # ^- and cmp al, 0x68 ('h') (cont)
68 75 # ^- jne 0x3 (cont)
03 e8 # ^- and call prev cell procedure (cont)
00 00 # ^-
00 00
00 00
00 00
00 00
00 00
00 00
90 5a # nop and pop dx
c9 c3 # leave and ret
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
00 00
55 aa # boot signature
